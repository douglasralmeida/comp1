/* Analisador Sintático para linguagem MLM */

package pacotePrincipal;

import java.lang.reflect.Field;
import java.util.List;
import java.util.ArrayList;
import java.util.LinkedList;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.Symbol;

import arvoreSintaxe.*;

class AnalisadorSintatico;

/* Código a ser executado antes do início da análise sintática */
init with {:
    tabela = new TabelaSimbolos();
:}

/* Código Java personalizado para o analisador sintático */
parser code {:
    TabelaSimbolos tabela;

    protected void report_expected_token_ids(){
        List<Integer> ids = expected_token_ids();
        LinkedList<String> list = new LinkedList<String>();

        for (Integer expected: ids) {
            list.add(symbl_name_from_id(expected));
        }
        System.out.println("Eram esperadas uma das expressoes: " + list + ".");
    }

    public String symbl_name_from_id(int id){
	      Field[] fields = getSymbolContainer().getFields();

	      for (Field f : fields) {
		        try {
			          if (f.getInt(null)==id)
			              return f.getName();
		        } catch (IllegalArgumentException e) {
		  	        e.printStackTrace();
		        } catch (IllegalAccessException e) {
			        e.printStackTrace();
		        }
	      }
	  return "símbolo id inválido.";
  }

    public void syntax_error(Symbol s) {
        ComplexSymbol cs = (ComplexSymbol)s;
        
        System.out.println(String.format("Um erro de sintaxe foi encontrado com a expressao \"%s\" na linha %d, coluna %d.", cs.getName(), cs.xleft.getLine(), cs.xleft.getColumn()));
        report_expected_token_ids();
    };
:}

/* Terminais (tokens retornados pelo analisador léxico). */
terminal            ADDOP, RELOP, MULOP, PROGRAM, INTEGER, REAL, BOOLEAN, CHAR, BEGIN,
                    END, IF, THEN, ELSE, DO, WHILE, UNTIL, READ, WRITE, IDENTIFIER, 
                    EOLCHAR, DECCHAR, ENUMCHAR, ASSIGNCHAR, OPENPARCHAR, CLOSEPARCHAR,
                    MINUSCHAR, NOT, EQUAL, LESS, GREATER, PLUS, TIMES, DIVIDED, LESSEQUAL,
                    GRATEREQUAL, DIFFERENT, OR, AND, MOD;

/* Nao terminais */
non terminal        program, dec_list, decl, ident_list, type, compound_stmt, 
                    stmt_list, stmt,
                    assign_stmt, if_stmt, cond, loop_stmt, stmt_prefix, stmt_suffix,
                    read_stmt, write_stmt, expr_list, expr, simple_expr, term, 
                    factor_a, factor, constant,
                    if_stmt_a, if_stmt_b;

/* Precedência */
precedence left ADDOP;
precedence left MULOP;

/* Ponto de partida */
start with program;

/* Regras gramaticais */
program ::= PROGRAM IDENTIFIER EOLCHAR dec_list:dl compound_stmt:cs {: 
    CompoundStmt compound = (CompoundStmt)cs;

    Program program = new Program(compound, tabela);
    if (program.possuiErroSemantico())
        report_fatal_error("", null);

    RESULT = program;
:};

dec_list ::= dec_list:dl EOLCHAR decl:d {:
    Decl decl = (Decl)d;

    for (String s: decl.lista)
        tabela.add(new Simbolo(s, decl.type));
:}
| decl:d {:
    RESULT = d;
:};

decl ::= ident_list:il DECCHAR type:t {:
    ArrayList<String> lista = (ArrayList<String>)il;
    Decl decl = new Decl(lista, (Type)t);

    RESULT = decl;
:};

ident_list ::= ident_list:il ENUMCHAR IDENTIFIER:nome  {:
    ArrayList<String> lista = (ArrayList<String>)il;
    lista.add((String)nome);
:}
| IDENTIFIER:nome  {: 
    ArrayList<String> il = new ArrayList<String>();
    il.add((String)nome);
    RESULT = il;
:};

type ::= INTEGER {:
        RESULT = Type.INTEGER;
    :}
    | REAL {:
        RESULT = Type.REAL;
    :}
    | BOOLEAN {: 
        RESULT = Type.BOOLEAN;
    :}
    | CHAR {:
          RESULT = Type.CHAR;
    :};

compound_stmt ::= BEGIN stmt_list:sl END {:
    StmtList lista = (StmtList)sl;
    CompoundStmt compound = new CompoundStmt(lista);
                    
    RESULT = compound;
:};

stmt_list ::= stmt_list:sl EOLCHAR stmt:s {:
    StmtList stmt_list;
    Stmt stmt = (Stmt)s;

    if (sl == null)
        stmt_list = new StmtList();
    else
        stmt_list = (StmtList)sl;
    stmt_list.add(stmt);

    RESULT = stmt_list;
:}
| stmt:s {:
    Stmt stmt = (Stmt)s;
    StmtList stmt_list = new StmtList();

    stmt_list.add(stmt);

    RESULT = stmt_list;
:};

stmt ::= assign_stmt:as {:
    RESULT = as;
:}
| if_stmt:is {: 
    RESULT = is;
:}
| loop_stmt:ls {: 
    RESULT = ls;
:}
| read_stmt:rs {: 
    RESULT = rs;
:}
| write_stmt:ws  {: 
    RESULT = ws;
:}
| compound_stmt:cs {: 
    RESULT = cs;
:};

assign_stmt ::= IDENTIFIER:n ASSIGNCHAR expr:e {:
    String nome = (String)n;
    Expr exp = (Expr)e;
    AssignStmt assign_stmt = new AssignStmt(nome, exp);

    RESULT = assign_stmt;
:};

/* Conflito shift-reduce:
if_stmt ::= IF cond THEN stmt
          | IF cond THEN stmt ELSE stmt; */

if_stmt_a ::= IF cond THEN if_stmt_a ELSE if_stmt_a {:

:};

if_stmt_b ::= IF cond THEN stmt {:

:}
| IF cond THEN if_stmt_a ELSE if_stmt_b {:

:};

if_stmt ::= if_stmt_a | if_stmt_b {:

:};

cond ::= expr:e {:
    Cond cond = new Cond((Expr)e);
    RESULT = cond;
:};

loop_stmt ::= stmt_prefix DO stmt_list stmt_suffix {:

:};

stmt_prefix ::= WHILE cond {:

:}
| /* vazio */ {:

:};

stmt_suffix ::= UNTIL cond {:

:}
| END {:

:};

read_stmt ::= READ OPENPARCHAR ident_list:il CLOSEPARCHAR {:
    ArrayList<Identifier> lista = (ArrayList<Identifier>)il;
    ReadStmt rs = new ReadStmt(lista);

    RESULT = rs;
:};

write_stmt ::= WRITE OPENPARCHAR expr_list:el CLOSEPARCHAR {:
    ArrayList<Expr> lista = (ArrayList<Expr>)el;
    WriteStmt ws = new WriteStmt(lista);

    RESULT = ws;
:};

expr_list ::= expr:e {:
    Expr expr = (Expr)e;
    ArrayList<Expr> lista = new ArrayList<Expr>();
    lista.add(expr);

    RESULT = lista;
:}
| expr_list:l ENUMCHAR expr:e {:
    Expr expr = (Expr)e;
    ArrayList<Expr> lista = (ArrayList<Expr>)l;
    lista.add(expr);

    RESULT = lista;
:};

expr ::= simple_expr:se {: 
    RESULT = se;
:}
| simple_expr:see RELOP:r simple_expr:sed {:
    Expr exp1 = (Expr)see;
    Expr exp2 = (Expr)sed;
    String relop = (String)r;
    RelacExpr re = new RelacExpr(exp1, relop, exp2);

    RESULT = re;
:};

simple_expr ::= term:t {:
    RESULT = t;
:}
| simple_expr:se ADDOP:a term:t {:
    Expr expr = (Expr)se;
    Expr term = (Expr)t;
    String addop = (String)a;
    AddExpr ae = new AddExpr(expr, addop, term);

    RESULT = ae;
:};

term ::= factor_a:f {:
    RESULT = f;
:}
| term:t MULOP:m factor_a:f {:
    Expr term = (Expr)t;
    Expr factor = (Expr)f;
    String mulop = (String)m;
    MultiExpr me = new MultiExpr(term, mulop, factor);

    RESULT = me;
:};

factor_a ::= MINUSCHAR factor:f {:
    Expr fac = (Expr)f;
    MinusExpr me = new MinusExpr(fac);

    RESULT = me;
:}
| factor:f {:
    RESULT = f;
:};

factor ::= IDENTIFIER:i {: 
    Identifier id = new Identifier((String)i);
    if (!tabela.contains((String)i))
        id.erroSemantico = true;

    RESULT = id;
:}
| constant:c {:
    RESULT = c;
:}
| OPENPARCHAR expr:e CLOSEPARCHAR {:
    Expr exp = (Expr)e; 
    ParExpr pe = new ParExpr(exp);

    RESULT = pe;
:}
| NOT factor:f {:
    Expr fac = (Expr)f;
    NotExpr ne = new NotExpr(fac);

    RESULT = ne;
:};

constant ::= INTEGER:i {: 
    IntegerConstant ic = new IntegerConstant((int)i);
    RESULT = ic;
:}
| REAL:r {:
    RealConstant rc = new RealConstant((float)r);
    RESULT = rc;
:}
| CHAR:c {:
    CharConstant cc = new CharConstant((char)c);
    RESULT = cc;
:}
| BOOLEAN:b {: 
    BooleanConstant bc = new BooleanConstant((boolean)b);
    RESULT = bc;
:};