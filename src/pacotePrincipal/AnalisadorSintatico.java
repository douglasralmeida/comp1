
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package pacotePrincipal;

import java.lang.reflect.Field;
import java.util.List;
import java.util.ArrayList;
import java.util.LinkedList;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.Symbol;
import arvoreSintaxe.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AnalisadorSintatico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return AnalisadorSintaticoSym.class;
}

  /** Default constructor. */
  @Deprecated
  public AnalisadorSintatico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public AnalisadorSintatico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalisadorSintatico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\064\000\002\002\004\000\002\002\007\000\002\003" +
    "\005\000\002\003\003\000\002\004\005\000\002\005\005" +
    "\000\002\005\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\007\005\000\002" +
    "\010\005\000\002\010\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\012\005\000\002\031\010\000" +
    "\002\032\006\000\002\032\010\000\002\013\003\000\002" +
    "\013\003\000\002\014\003\000\002\015\006\000\002\016" +
    "\004\000\002\016\002\000\002\017\004\000\002\017\003" +
    "\000\002\020\006\000\002\021\006\000\002\022\003\000" +
    "\002\022\005\000\002\023\003\000\002\023\005\000\002" +
    "\024\003\000\002\024\005\000\002\025\003\000\002\025" +
    "\005\000\002\026\004\000\002\026\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\005\000\002\027\004\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\132\000\004\007\005\001\002\000\004\002\134\001" +
    "\002\000\004\026\006\001\002\000\004\027\007\001\002" +
    "\000\004\026\012\001\002\000\006\014\ufffe\027\ufffe\001" +
    "\002\000\006\014\025\027\026\001\002\000\010\030\ufffb" +
    "\031\ufffb\034\ufffb\001\002\000\006\030\014\031\015\001" +
    "\002\000\012\010\017\011\020\012\022\013\023\001\002" +
    "\000\004\026\016\001\002\000\010\030\ufffc\031\ufffc\034" +
    "\ufffc\001\002\000\006\014\ufffa\027\ufffa\001\002\000\006" +
    "\014\ufff9\027\ufff9\001\002\000\006\014\ufffd\027\ufffd\001" +
    "\002\000\006\014\ufff8\027\ufff8\001\002\000\006\014\ufff7" +
    "\027\ufff7\001\002\000\004\002\000\001\002\000\020\014" +
    "\025\016\043\021\uffe4\022\032\024\030\025\044\026\045" +
    "\001\002\000\004\026\012\001\002\000\006\014\uffff\027" +
    "\uffff\001\002\000\004\033\131\001\002\000\010\015\uffee" +
    "\023\uffee\027\uffee\001\002\000\022\010\060\011\067\012" +
    "\065\013\075\026\072\033\057\035\062\036\073\001\002" +
    "\000\010\015\ufff2\023\ufff2\027\ufff2\001\002\000\010\015" +
    "\uffef\023\uffef\027\uffef\001\002\000\010\015\ufff4\023\ufff4" +
    "\027\ufff4\001\002\000\010\015\ufff3\023\ufff3\027\ufff3\001" +
    "\002\000\010\015\ufff1\023\ufff1\027\ufff1\001\002\000\010" +
    "\015\uffe8\023\uffe8\027\uffe8\001\002\000\010\015\uffe9\023" +
    "\uffe9\027\uffe9\001\002\000\010\015\ufff0\023\ufff0\027\ufff0" +
    "\001\002\000\022\010\060\011\067\012\065\013\075\026" +
    "\072\033\057\035\062\036\073\001\002\000\004\033\113" +
    "\001\002\000\004\032\111\001\002\000\006\015\110\027" +
    "\055\001\002\000\004\021\050\001\002\000\020\014\025" +
    "\016\043\021\uffe4\022\032\024\030\025\044\026\045\001" +
    "\002\000\010\015\053\023\054\027\055\001\002\000\010" +
    "\015\uffe6\023\uffe6\027\uffe6\001\002\000\010\015\uffe2\023" +
    "\uffe2\027\uffe2\001\002\000\022\010\060\011\067\012\065" +
    "\013\075\026\072\033\057\035\062\036\073\001\002\000" +
    "\020\014\025\016\043\021\uffe4\022\032\024\030\025\044" +
    "\026\045\001\002\000\010\015\ufff5\023\ufff5\027\ufff5\001" +
    "\002\000\022\010\060\011\067\012\065\013\075\026\072" +
    "\033\057\035\062\036\073\001\002\000\026\004\uffd1\005" +
    "\uffd1\006\uffd1\015\uffd1\017\uffd1\021\uffd1\023\uffd1\027\uffd1" +
    "\031\uffd1\034\uffd1\001\002\000\026\004\uffd9\005\uffd9\006" +
    "\uffd9\015\uffd9\017\uffd9\021\uffd9\023\uffd9\027\uffd9\031\uffd9" +
    "\034\uffd9\001\002\000\020\010\060\011\067\012\065\013" +
    "\075\026\072\033\057\036\073\001\002\000\024\004\101" +
    "\005\102\015\uffdd\017\uffdd\021\uffdd\023\uffdd\027\uffdd\031" +
    "\uffdd\034\uffdd\001\002\000\026\004\uffdb\005\uffdb\006\077" +
    "\015\uffdb\017\uffdb\021\uffdb\023\uffdb\027\uffdb\031\uffdb\034" +
    "\uffdb\001\002\000\026\004\uffce\005\uffce\006\uffce\015\uffce" +
    "\017\uffce\021\uffce\023\uffce\027\uffce\031\uffce\034\uffce\001" +
    "\002\000\026\004\uffd4\005\uffd4\006\uffd4\015\uffd4\017\uffd4" +
    "\021\uffd4\023\uffd4\027\uffd4\031\uffd4\034\uffd4\001\002\000" +
    "\026\004\uffd0\005\uffd0\006\uffd0\015\uffd0\017\uffd0\021\uffd0" +
    "\023\uffd0\027\uffd0\031\uffd0\034\uffd0\001\002\000\010\015" +
    "\uffe3\023\uffe3\027\uffe3\001\002\000\026\004\uffd6\005\uffd6" +
    "\006\uffd6\015\uffd6\017\uffd6\021\uffd6\023\uffd6\027\uffd6\031" +
    "\uffd6\034\uffd6\001\002\000\026\004\uffd5\005\uffd5\006\uffd5" +
    "\015\uffd5\017\uffd5\021\uffd5\023\uffd5\027\uffd5\031\uffd5\034" +
    "\uffd5\001\002\000\020\010\060\011\067\012\065\013\075" +
    "\026\072\033\057\036\073\001\002\000\014\015\uffe7\017" +
    "\uffe7\021\uffe7\023\uffe7\027\uffe7\001\002\000\026\004\uffcf" +
    "\005\uffcf\006\uffcf\015\uffcf\017\uffcf\021\uffcf\023\uffcf\027" +
    "\uffcf\031\uffcf\034\uffcf\001\002\000\026\004\uffd2\005\uffd2" +
    "\006\uffd2\015\uffd2\017\uffd2\021\uffd2\023\uffd2\027\uffd2\031" +
    "\uffd2\034\uffd2\001\002\000\022\010\060\011\067\012\065" +
    "\013\075\026\072\033\057\035\062\036\073\001\002\000" +
    "\026\004\uffd8\005\uffd8\006\uffd8\015\uffd8\017\uffd8\021\uffd8" +
    "\023\uffd8\027\uffd8\031\uffd8\034\uffd8\001\002\000\022\010" +
    "\060\011\067\012\065\013\075\026\072\033\057\035\062" +
    "\036\073\001\002\000\022\010\060\011\067\012\065\013" +
    "\075\026\072\033\057\035\062\036\073\001\002\000\022" +
    "\004\101\015\uffdc\017\uffdc\021\uffdc\023\uffdc\027\uffdc\031" +
    "\uffdc\034\uffdc\001\002\000\026\004\uffda\005\uffda\006\077" +
    "\015\uffda\017\uffda\021\uffda\023\uffda\027\uffda\031\uffda\034" +
    "\uffda\001\002\000\026\004\uffd7\005\uffd7\006\uffd7\015\uffd7" +
    "\017\uffd7\021\uffd7\023\uffd7\027\uffd7\031\uffd7\034\uffd7\001" +
    "\002\000\004\034\107\001\002\000\026\004\uffd3\005\uffd3" +
    "\006\uffd3\015\uffd3\017\uffd3\021\uffd3\023\uffd3\027\uffd3\031" +
    "\uffd3\034\uffd3\001\002\000\012\002\ufff6\015\ufff6\023\ufff6" +
    "\027\ufff6\001\002\000\022\010\060\011\067\012\065\013" +
    "\075\026\072\033\057\035\062\036\073\001\002\000\010" +
    "\015\uffed\023\uffed\027\uffed\001\002\000\022\010\060\011" +
    "\067\012\065\013\075\026\072\033\057\035\062\036\073" +
    "\001\002\000\006\031\117\034\116\001\002\000\006\031" +
    "\uffdf\034\uffdf\001\002\000\010\015\uffe0\023\uffe0\027\uffe0" +
    "\001\002\000\022\010\060\011\067\012\065\013\075\026" +
    "\072\033\057\035\062\036\073\001\002\000\006\031\uffde" +
    "\034\uffde\001\002\000\004\017\122\001\002\000\020\014" +
    "\025\016\043\021\uffe4\022\032\024\030\025\044\026\045" +
    "\001\002\000\010\015\uffeb\023\uffeb\027\uffeb\001\002\000" +
    "\012\015\uffe9\020\125\023\uffe9\027\uffe9\001\002\000\004" +
    "\016\043\001\002\000\010\015\uffea\023\uffea\027\uffea\001" +
    "\002\000\012\015\uffec\020\uffec\023\uffec\027\uffec\001\002" +
    "\000\004\021\uffe5\001\002\000\004\026\012\001\002\000" +
    "\006\031\015\034\133\001\002\000\010\015\uffe1\023\uffe1" +
    "\027\uffe1\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\132\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\010\004\007" +
    "\005\012\001\001\000\002\001\001\000\004\007\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\007\030\010" +
    "\045\011\034\012\035\013\032\015\036\016\046\020\041" +
    "\021\033\031\040\032\037\001\001\000\006\004\026\005" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\014\127\023\073\024\062\025\063\026" +
    "\060\027\070\030\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\014\120\023\073\024\062\025\063\026\060\027" +
    "\070\030\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\007\030\010" +
    "\050\011\034\012\035\013\032\015\036\016\046\020\041" +
    "\021\033\031\040\032\037\001\001\000\004\017\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\014\067" +
    "\023\073\024\062\025\063\026\060\027\070\030\065\001" +
    "\001\000\026\007\030\011\055\012\035\013\032\015\036" +
    "\016\046\020\041\021\033\031\040\032\037\001\001\000" +
    "\002\001\001\000\016\023\105\024\062\025\063\026\060" +
    "\027\070\030\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\027\104\030\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\027\075\030\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\026\077" +
    "\027\070\030\065\001\001\000\002\001\001\000\012\025" +
    "\103\026\060\027\070\030\065\001\001\000\014\024\102" +
    "\025\063\026\060\027\070\030\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\023\111\024" +
    "\062\025\063\026\060\027\070\030\065\001\001\000\002" +
    "\001\001\000\020\022\113\023\114\024\062\025\063\026" +
    "\060\027\070\030\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\023\117\024\062\025" +
    "\063\026\060\027\070\030\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\007\030\011\122\012\035\013" +
    "\032\015\036\016\046\020\041\021\033\031\123\032\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\031" +
    "\126\032\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\131\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalisadorSintatico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalisadorSintatico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalisadorSintatico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    tabela = new TabelaSimbolos();

    }


    TabelaSimbolos tabela;

    protected void report_expected_token_ids(){
        List<Integer> ids = expected_token_ids();
        LinkedList<String> list = new LinkedList<String>();

        for (Integer expected: ids) {
            list.add(symbl_name_from_id(expected));
        }
        System.out.println("Eram esperadas uma das expressoes: " + list + ".");
    }

    public String symbl_name_from_id(int id){
	      Field[] fields = getSymbolContainer().getFields();

	      for (Field f : fields) {
		        try {
			          if (f.getInt(null)==id)
			              return f.getName();
		        } catch (IllegalArgumentException e) {
		  	        e.printStackTrace();
		        } catch (IllegalAccessException e) {
			        e.printStackTrace();
		        }
	      }
	  return "símbolo id inválido.";
  }

    public void syntax_error(Symbol s) {
        ComplexSymbol cs = (ComplexSymbol)s;
        
        System.out.println(String.format("Um erro de sintaxe foi encontrado com a expressao \"%s\" na linha %d, coluna %d.", cs.getName(), cs.xleft.getLine(), cs.xleft.getColumn()));
        report_expected_token_ids();
    };


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AnalisadorSintatico$actions {
  private final AnalisadorSintatico parser;

  /** Constructor */
  CUP$AnalisadorSintatico$actions(AnalisadorSintatico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalisadorSintatico$do_action_part00000000(
    int                        CUP$AnalisadorSintatico$act_num,
    java_cup.runtime.lr_parser CUP$AnalisadorSintatico$parser,
    java.util.Stack            CUP$AnalisadorSintatico$stack,
    int                        CUP$AnalisadorSintatico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalisadorSintatico$result;

      /* select the action based on the action number */
      switch (CUP$AnalisadorSintatico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		RESULT = start_val;
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalisadorSintatico$parser.done_parsing();
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= PROGRAM IDENTIFIER EOLCHAR dec_list compound_stmt 
            {
              Object RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Object dl = (Object)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
    CompoundStmt compound = (CompoundStmt)cs;

    Program program = new Program(compound, tabela);
    if (program.possuiErroSemantico())
        report_fatal_error("", null);

    RESULT = program;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // dec_list ::= dec_list EOLCHAR decl 
            {
              Object RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Object dl = (Object)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		
    Decl decl = (Decl)d;

    for (String s: decl.lista)
        tabela.add(new Simbolo(s, decl.type));

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("dec_list",1, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // dec_list ::= decl 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		
    RESULT = d;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("dec_list",1, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decl ::= ident_list DECCHAR type 
            {
              Object RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Object il = (Object)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		
    ArrayList<String> lista = (ArrayList<String>)il;
    Decl decl = new Decl(lista, (Type)t);

    RESULT = decl;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("decl",2, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ident_list ::= ident_list ENUMCHAR IDENTIFIER 
            {
              Object RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Object il = (Object)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int nomeleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int nomeright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Object nome = (Object)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		
    ArrayList<String> lista = (ArrayList<String>)il;
    lista.add((String)nome);

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("ident_list",3, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ident_list ::= IDENTIFIER 
            {
              Object RESULT =null;
		int nomeleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int nomeright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Object nome = (Object)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
    ArrayList<String> il = new ArrayList<String>();
    il.add((String)nome);
    RESULT = il;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("ident_list",3, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // type ::= INTEGER 
            {
              Object RESULT =null;
		
        RESULT = Type.INTEGER;
    
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type ::= REAL 
            {
              Object RESULT =null;
		
        RESULT = Type.REAL;
    
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type ::= BOOLEAN 
            {
              Object RESULT =null;
		 
        RESULT = Type.BOOLEAN;
    
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type ::= CHAR 
            {
              Object RESULT =null;
		
          RESULT = Type.CHAR;
    
              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // compound_stmt ::= BEGIN stmt_list END 
            {
              Object RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Object sl = (Object)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		
    StmtList lista = (StmtList)sl;
    CompoundStmt compound = new CompoundStmt(lista);
                    
    RESULT = compound;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("compound_stmt",5, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt_list ::= stmt_list EOLCHAR stmt 
            {
              Object RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Object sl = (Object)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		
    StmtList stmt_list;
    Stmt stmt = (Stmt)s;

    if (sl == null)
        stmt_list = new StmtList();
    else
        stmt_list = (StmtList)sl;
    stmt_list.add(stmt);

    RESULT = stmt_list;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stmt_list",6, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt_list ::= stmt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		
    Stmt stmt = (Stmt)s;
    StmtList stmt_list = new StmtList();

    stmt_list.add(stmt);

    RESULT = stmt_list;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stmt_list",6, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt ::= assign_stmt 
            {
              Object RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Object as = (Object)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		
    RESULT = as;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stmt",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt ::= if_stmt 
            {
              Object RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Object is = (Object)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
    RESULT = is;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stmt",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= loop_stmt 
            {
              Object RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Object ls = (Object)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
    RESULT = ls;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stmt",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= read_stmt 
            {
              Object RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Object rs = (Object)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
    RESULT = rs;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stmt",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmt ::= write_stmt 
            {
              Object RESULT =null;
		int wsleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int wsright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Object ws = (Object)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
    RESULT = ws;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stmt",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmt ::= compound_stmt 
            {
              Object RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
    RESULT = cs;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stmt",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // assign_stmt ::= IDENTIFIER ASSIGNCHAR expr 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		
    String nome = (String)n;
    Expr exp = (Expr)e;
    AssignStmt assign_stmt = new AssignStmt(nome, exp);

    RESULT = assign_stmt;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("assign_stmt",8, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // if_stmt_a ::= IF cond THEN if_stmt_a ELSE if_stmt_a 
            {
              Object RESULT =null;
		


              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("if_stmt_a",23, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // if_stmt_b ::= IF cond THEN stmt 
            {
              Object RESULT =null;
		


              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("if_stmt_b",24, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // if_stmt_b ::= IF cond THEN if_stmt_a ELSE if_stmt_b 
            {
              Object RESULT =null;
		


              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("if_stmt_b",24, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // if_stmt ::= if_stmt_a 
            {
              Object RESULT =null;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("if_stmt",9, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // if_stmt ::= if_stmt_b 
            {
              Object RESULT =null;
		


              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("if_stmt",9, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // cond ::= expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		
    Cond cond = new Cond((Expr)e);
    RESULT = cond;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("cond",10, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // loop_stmt ::= stmt_prefix DO stmt_list stmt_suffix 
            {
              Object RESULT =null;
		


              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("loop_stmt",11, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmt_prefix ::= WHILE cond 
            {
              Object RESULT =null;
		


              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stmt_prefix",12, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmt_prefix ::= 
            {
              Object RESULT =null;
		


              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stmt_prefix",12, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmt_suffix ::= UNTIL cond 
            {
              Object RESULT =null;
		


              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stmt_suffix",13, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt_suffix ::= END 
            {
              Object RESULT =null;
		


              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("stmt_suffix",13, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // read_stmt ::= READ OPENPARCHAR ident_list CLOSEPARCHAR 
            {
              Object RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Object il = (Object)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		
    ArrayList<Identifier> lista = (ArrayList<Identifier>)il;
    ReadStmt rs = new ReadStmt(lista);

    RESULT = rs;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("read_stmt",14, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // write_stmt ::= WRITE OPENPARCHAR expr_list CLOSEPARCHAR 
            {
              Object RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		
    ArrayList<Expr> lista = (ArrayList<Expr>)el;
    WriteStmt ws = new WriteStmt(lista);

    RESULT = ws;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("write_stmt",15, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr_list ::= expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		
    Expr expr = (Expr)e;
    ArrayList<Expr> lista = new ArrayList<Expr>();
    lista.add(expr);

    RESULT = lista;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("expr_list",16, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr_list ::= expr_list ENUMCHAR expr 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		
    Expr expr = (Expr)e;
    ArrayList<Expr> lista = (ArrayList<Expr>)l;
    lista.add(expr);

    RESULT = lista;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("expr_list",16, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= simple_expr 
            {
              Object RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Object se = (Object)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
    RESULT = se;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= simple_expr RELOP simple_expr 
            {
              Object RESULT =null;
		int seeleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int seeright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Object see = (Object)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int sedleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int sedright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Object sed = (Object)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		
    Expr exp1 = (Expr)see;
    Expr exp2 = (Expr)sed;
    String relop = (String)r;
    RelacExpr re = new RelacExpr(exp1, relop, exp2);

    RESULT = re;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // simple_expr ::= term 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		
    RESULT = t;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("simple_expr",18, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // simple_expr ::= simple_expr ADDOP term 
            {
              Object RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Object se = (Object)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		
    Expr expr = (Expr)se;
    Expr term = (Expr)t;
    String addop = (String)a;
    AddExpr ae = new AddExpr(expr, addop, term);

    RESULT = ae;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("simple_expr",18, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // term ::= factor_a 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		
    RESULT = f;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("term",19, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // term ::= term MULOP factor_a 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		
    Expr term = (Expr)t;
    Expr factor = (Expr)f;
    String mulop = (String)m;
    MultiExpr me = new MultiExpr(term, mulop, factor);

    RESULT = me;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("term",19, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // factor_a ::= MINUSCHAR factor 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		
    Expr fac = (Expr)f;
    MinusExpr me = new MinusExpr(fac);

    RESULT = me;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("factor_a",20, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // factor_a ::= factor 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		
    RESULT = f;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("factor_a",20, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // factor ::= IDENTIFIER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
    Identifier id = new Identifier((String)i);
    if (!tabela.contains((String)i))
        id.erroSemantico = true;

    RESULT = id;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // factor ::= constant 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		
    RESULT = c;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // factor ::= OPENPARCHAR expr CLOSEPARCHAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)).value;
		
    Expr exp = (Expr)e; 
    ParExpr pe = new ParExpr(exp);

    RESULT = pe;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // factor ::= NOT factor 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		
    Expr fac = (Expr)f;
    NotExpr ne = new NotExpr(fac);

    RESULT = ne;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.elementAt(CUP$AnalisadorSintatico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // constant ::= INTEGER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
    IntegerConstant ic = new IntegerConstant((int)i);
    RESULT = ic;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("constant",22, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // constant ::= REAL 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		
    RealConstant rc = new RealConstant((float)r);
    RESULT = rc;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("constant",22, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // constant ::= CHAR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		
    CharConstant cc = new CharConstant((char)c);
    RESULT = cc;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("constant",22, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // constant ::= BOOLEAN 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalisadorSintatico$stack.peek()).value;
		 
    BooleanConstant bc = new BooleanConstant((boolean)b);
    RESULT = bc;

              CUP$AnalisadorSintatico$result = parser.getSymbolFactory().newSymbol("constant",22, ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintatico$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintatico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalisadorSintatico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalisadorSintatico$do_action(
    int                        CUP$AnalisadorSintatico$act_num,
    java_cup.runtime.lr_parser CUP$AnalisadorSintatico$parser,
    java.util.Stack            CUP$AnalisadorSintatico$stack,
    int                        CUP$AnalisadorSintatico$top)
    throws java.lang.Exception
    {
              return CUP$AnalisadorSintatico$do_action_part00000000(
                               CUP$AnalisadorSintatico$act_num,
                               CUP$AnalisadorSintatico$parser,
                               CUP$AnalisadorSintatico$stack,
                               CUP$AnalisadorSintatico$top);
    }
}

}
